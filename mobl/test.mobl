module mobl::test

import mobl::ui::generic
import mobl::test::style

var testSuites : [(String, Callback)] = Array<(String, Callback)>();
var testLogs = Collection<TestSuiteResult>();
var currentSuiteResult : TestSuiteResult = null; 

type TestSuiteResult {
  description : String
  results     : Collection<TestResult>
}

type TestResult {
  description : String
  message     : String
  success     : Bool
}

@doc "Defines a new test suite"
function testSuite(description : String, tests : Callback) {
  testSuites.push((description, tests));
}

function assertEqual(expected : Object, actual : Object, description : String = "assertEqual") {
  if(expected == actual) {
    currentSuiteResult.results.add(TestResult(description=description, success=true));
  } else {
    currentSuiteResult.results.add(TestResult(description=description, success=false, message="Expected: " + expected + " Got: " + actual));
  }
}

function assert(value : Bool, description : String = "assert") {
  currentSuiteResult.results.add(TestResult(description=description, success=value));
}

// Internal use only
function runAllTests() {
  foreach((description, runTests) in testSuites) {
    currentSuiteResult = TestSuiteResult(description=description, results=Collection<TestResult>());
    testLogs.add(currentSuiteResult);
    runTests(null); 
  }
}

control testRunner() {
  group {
    list(tsr in testLogs) {
      item(style=suiteItemStyle) { label(tsr.description) }
      list(tr in tsr.results) {
        item(style=tr.success ? successItemStyle : failureItemStyle) {
          when(tr.success) {
            label("[OK] " + tr.description)
          } else {
            label("[FAIL] " + tr.description)
            when(tr.message) {
              block(descriptionStyle) {
                label(tr.message)
              }
            }
          }
        }
      }
    }
  }
  script {
    async {
      runAllTests();
    }
  }
}