module mobl::test

import mobl::ui::generic
import mobl::test::style
import mobl::test::type

var testSuites : [(String, String, Callback)] = Array<(String, String, Callback)>();
var testLogs = Collection<TestSuiteResult>();
var currentCaseResult : TestCaseResult = null; 
var currentSuite : String = "suite";
var currentCase : String = "case";

@doc "Defines a new test suite"
function testSuite(suite : String, cases : Callback) {
  currentSuite = suite;
  cases(null);
}

@doc "Defines a new test case"
function testCase(description : String, tests : Callback) {
  testSuites.push((currentSuite, description, tests));
}

function assertEqual(expected : Object, actual : Object) {
  if(expected == actual) {
    currentCaseResult.results.add(TestResult(success=true));
  } else {
    currentCaseResult.results.add(TestResult(success=false, message="Expected: " + expected + " Got: " + actual));
  }
}

function assert(value : Bool) {
  currentCaseResult.results.add(TestResult(success=value));
}

function findTestCaseResult(description : String, tsr : TestSuiteResult) : TestCaseResult {
  foreach (kase in tsr.cases) {
    if (kase.description == description) {
      return kase;
    }
  }
  return TestCaseResult(description=description, results=Collection<TestResult>());
}

function findTestSuiteResult(suite : String) : TestSuiteResult {
  foreach (tsr in testLogs) {
    if (tsr.description == suite) {
      return tsr;
    }
  }
  return TestSuiteResult(description=suite, cases=Collection<TestCaseResult>());
}

// Internal use only
function runAllTests() {
  foreach((suite, description, runTests) in testSuites) {
    var tsr = findTestSuiteResult(suite);
    currentCaseResult = findTestCaseResult(description, tsr);
    tsr.cases.add(currentCaseResult);
    testLogs.add(tsr);
    runTests(null); 
  }
}

control testRunner() {
  group {
    list(tsr in testLogs) {
      item(style=suiteItemStyle) { label(tsr.description) }
      list(tcr in tsr.cases) {
        item(style=caseItemStyle) { label(tcr.description) }
        list(tr in tcr.results) {
          item(style=tr.success ? successItemStyle : failureItemStyle) {
            when(tr.success) {
              label("[OK] ")
            } else {
              label("[FAIL] ")
              when(tr.message) {
                block(descriptionStyle) {
                  label(tr.message)
                }
              }
            }
          }
        }
      }
    }
  }
  script {
    async {
      runAllTests();
    }
  }
}
