module mobl::test

import mobl::ui::generic
import mobl::test::style
import mobl::test::type

var testSuites : [(String, String, Callback)] = Array<(String, String, Callback)>();
var testCases : [(String, Callback)] = Array<(String, Callback)>();
var testLogs = Collection<TestSuiteResult>();
var currentCaseResult : TestCaseResult = null;
var caseSetUp : Callback = null;
var caseTearDown : Callback = null;

@doc "Defines a new test suite"
function testSuite(suite : String, cases : Array<Dynamic>) {
  foreach ((description, block) in testCases) {
    if (caseSetUp) {
      testSuites.push((suite, description, caseSetUp));
    }
    testSuites.push((suite, description, block));
    if (caseTearDown) {
      testSuites.push((suite, description, caseTearDown));
    }
  }
  testCases.length = 0;
  caseSetUp = null;
  caseTearDown = null;
}

@doc "Defines a new test case"
function testCase(description : String, tests : Callback) {
  testCases.push((description, tests));
}

@doc "Defines a set up"
function setUp(block : Callback) {
  caseSetUp = block;
}

@doc "Defines a tear down"
function tearDown(block : Callback) {
  caseTearDown = block;
}

function assertEqual(expected : Object, actual : Object) {
  if(expected == actual) {
    currentCaseResult.results.add(TestResult(success=true));
  } else {
    currentCaseResult.results.add(TestResult(success=false, message="Expected: " + expected + " Got: " + actual));
  }
}

function assert(value : Bool) {
  currentCaseResult.results.add(TestResult(success=value));
}

function find(property : String, value : String, collection : Collection<Object>, hollow : Object = null) : Dynamic {
  var item = collection.filter(property, "=", value).one();
  if (hollow != null && item == null) {
  	item = hollow;
    collection.add(item);
  }
  return item;
}

function logTestSuite(suite : String, kase : String) {
  var tsr = find("description", suite, testLogs,
    TestSuiteResult(description=suite, cases=Collection<TestCaseResult>()));
  currentCaseResult = find("description", kase, tsr.cases,
    TestCaseResult(description=kase, results=Collection<TestResult>(), elapsed=0));
}

// Internal use only
function runAllTests() {
  foreach((suite, kase, runTests) in testSuites) {
  	logTestSuite(suite, kase);
  	var start = now().getTime();
    runTests(null);
    currentCaseResult.elapsed = now().getTime() - start;
  }
}

control testRunner() {
  group {
    list(tsr in testLogs) {
      item(style=suiteItemStyle) { label(tsr.description) }
      list(tcr in tsr.cases) {
        item(style=caseItemStyle) { label(tcr.description + " (" + tcr.elapsed + " ms)") }
        list(tr in tcr.results) {
          item(style=tr.success ? successItemStyle : failureItemStyle) {
            when(tr.success) {
              label("[OK] ")
            } else {
              label("[FAIL] ")
              when(tr.message) {
                block(descriptionStyle) {
                  label(tr.message)
                }
                // block(descriptionStyle) {
                //   label("Line: ")
                // }
              }
            }
          }
        }
      }
    }
  }
  script {
    async {
      runAllTests();
    }
  }
}
